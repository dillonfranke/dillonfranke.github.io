<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on Dillon Franke Security</title><link>https://www.dillonfrankesecurity.com/posts/</link><description>Recent content in Posts on Dillon Franke Security</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 23 Oct 2023 11:21:14 -0700</lastBuildDate><atom:link href="https://www.dillonfrankesecurity.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>An Analysis of CVE-2023-36563, a WordPad Information Disclosure Vulnerability</title><link>https://www.dillonfrankesecurity.com/posts/cve-2023-36563-wordpad-analysis/</link><pubDate>Mon, 23 Oct 2023 11:21:14 -0700</pubDate><guid>https://www.dillonfrankesecurity.com/posts/cve-2023-36563-wordpad-analysis/</guid><description>In this blog post, I’ll discuss my analysis of CVE-2023-36563, a Microsoft WordPad Information Disclosure Vulnerability, from initial patch diff to working exploit. Then, I’ll discuss detection and mitigation strategies for preventing exploitation of this vulnerability.
CVE-2023-36563 Overview Summary CVE-2023-36563&amp;rsquo;s flaw lies within legacy functionality to convert an OLE 1 storage object (OLESTREAM) to the new IStorage format. By crafting a file with a malicious OLE 1 LinkedObject, an attacker could coerce authentication to an untrusted server to steal NTLM hashes.</description></item><item><title>ProtoBurp: Encode and Fuzz Custom Protobuf Messages in Burp Suite</title><link>https://www.dillonfrankesecurity.com/posts/protoburp-encode-custom-protobuf-messages-in-burp/</link><pubDate>Wed, 02 Aug 2023 14:22:41 -0700</pubDate><guid>https://www.dillonfrankesecurity.com/posts/protoburp-encode-custom-protobuf-messages-in-burp/</guid><description>Background Protocol Buffers (Protobufs) are a language agnostic data serialization format that allow data to be safely and efficiently trasmitted or stored. Protobuf usage has exploded within the past several years. When testing web applications, mobile applications, and embedded devices alike, it&amp;rsquo;s increasingly likely you&amp;rsquo;ll encounter Protobuf data within requests like this:
A normal binary Protobuf request
You might have logically tried to fuzz these inputs as you would any other parameter, only to realize that things weren&amp;rsquo;t as simple as they appeared:</description></item><item><title>Java Static Vulnerability Analysis to Increase Your Bounty</title><link>https://www.dillonfrankesecurity.com/posts/java-static-vulnerability-analysis-to-increase-your-bounty/</link><pubDate>Fri, 03 Mar 2023 11:40:07 -0800</pubDate><guid>https://www.dillonfrankesecurity.com/posts/java-static-vulnerability-analysis-to-increase-your-bounty/</guid><description>If you want to get serious about finding impactful vulnerabilities through static analysis, it’s time to move beyond simply grep-ing through code bases. In this blog post, I’ll share my personal process for setting up a robust environment for Java static analysis of console applications, web applications, and Android applications. Once you’ve established this test environment, you’ll be able to take advantage of automatic code references, trace usages across a code base, and leverage source-to-sink analysis to find elusive vulnerabilities.</description></item></channel></rss>