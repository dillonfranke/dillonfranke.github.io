[{"content":"In this blog post, I’ll discuss my analysis of CVE-2023-36563, a Microsoft WordPad Information Disclosure Vulnerability, from initial patch diff to working exploit. Then, I’ll discuss detection and mitigation strategies for preventing exploitation of this vulnerability.\nCVE-2023-36563 Overview Summary CVE-2023-36563\u0026rsquo;s flaw lies within legacy functionality to convert an OLE 1 storage object (OLESTREAM) to the new IStorage format. By crafting a file with a malicious OLE 1 LinkedObject, an attacker could coerce authentication to an untrusted server to steal NTLM hashes.\nInspiration There were a few things that made this vulnerability stick out to me and inspired me to figure out how it worked:\nThe vulnerability was added to CISA’s Known Exploited Vulnerabilities Catalog, meaning someone was able to exploit this vulnerability in the wild. The “information disclosure” referred to a victim’s NTLM hashes, which can be very practically abused using NTLM relay attacks. The vulnerability is triggered by opening a malicious file with WordPad, which is very applicable for phishing and red team operations. It’s WordPad, and it’s hilarious that this vulnerability was announced right as WordPad is being deprecated Technical Analysis When trying to understand how recently released (or N-day) vulnerabilities work, performing a binary patch diff is an enormous help. In essence, we compare the binary instructions of a program using software like Bindiff before and after an update is applied. This gives us vital hints regarding fixes that occurred during a patch.\nDuring my analysis, I reminded myself that this vulnerability resulted in NTLM hash disclosures. This heavily suggested that the vulnerability had something to do with making a web request or accessing a resource, since such operations can trigger an NTLM challenge-response.\nAdditionally, the CVE mentioned that the vulnerability was triggered by opening a malicious file in WordPad, so I would likely need to get familiar with the RTF file type.\nWordPad.exe Before Patch MD5: bd05d1b9fba2f5f1db6fbb59d3a78d84\nAfter Patch MD5: e46d2a1e4836b78d00eeccc0e1db0f52\nModified Functions I figured the wordpad.exe binary was a great place to start patch diffing. Bindiff identified several interesting functions that were modified by the patch. The one that interested me most was the LoadImageResource function, which sounded like it might handle retrieving an image within a document.\nWordPad.exe Modified Functions\nThis ended up being a red herring. I set a breakpoint on the function in windbg and triggered it when hovering over an icon within WordPad that loaded several preview images of bullet points. Thus, it seemed to me like the function handled loading a resource from within the WordPad executable itself\u0026ndash;not something we\u0026rsquo;d be able to easily exploit.\nshell\\shell32\\netfldrp_ui.h(83)\\SHELL32.dll!00007FFE78FA87DF: (caller: 00007FFE7614F490) ReturnHr(5) tid(1184) 80004001 Not implemented (1498.11d4): Unknown exception - code 000006ba (first chance) (1498.11d4): Unknown exception - code 000006ba (first chance) ModLoad: 00007ffe`6c550000 00007ffe`6c567000 C:\\Windows\\system32\\OnDemandConnRouteHelper.dll ModLoad: 00007ffe`404f0000 00007ffe`4053b000 C:\\Windows\\system32\\ndfapi.dll ModLoad: 00007ffe`6f970000 00007ffe`6f98f000 C:\\Windows\\system32\\wdi.dll Breakpoint 1 hit wordpad!LoadImageResource: LoadImageResource function triggered from application resources\nNew Functions I also noticed that a new function was added called QueryConvertOLELinkCallback, a wrapper that would call a provided callback function. This wrapper was called within one of WordPad\u0026rsquo;s main editing functions, as shown below. I wasn\u0026rsquo;t sure what this was used for quite yet, but I took note of it.\nNew QueryConvertOLELinkCallback function\nAn OLE Primer The QueryConvertOLELinkCallback got me thinking that the vulnerability might have something to do with Microsoft\u0026rsquo;s Object Linking and Embedding (OLE) format. In essence, OLE allows for objects and files to be embedded within other files on Windows.\nAs a brief example of how OLE objects work, let\u0026rsquo;s examine a paint object embedded within an RTF file. To do this, we can pop open WordPad, select Insert Object and Paintbrush Picture. Then, we\u0026rsquo;ll be able to create a paint image in MsPaint and have it show up in the RTF file.\nEmbedding a paintbrush picture within an RTF document\nIf we opened the RTF file in Notepad, we would notice an \\objdata tag containing hexadecimal data for the embedded object. More on this in just a bit.\nThe embedded object\u0026rsquo;s hexadecimal data\nOLE functionality has been extensively abused by attackers, especially within Rich Text Format (RTF) files, which happens to be the default file type for WordPad. OLE was even the culprit of the infamous Follina RCE vulnerability (CVE-2022-30190).\nMuch of OLE\u0026rsquo;s functionality is implemented by the ole32.dll Windows library, so that seemed like a logical next place to explore. This is where things started to get interesting.\nOle32.dll Before Patch MD5: 5151f3912370086a405a9a7070768f4b\nAfter Patch MD5: 72907f2a113ebf319838f6276fbd0460\nModified Functions The following functions were modified from the patch. The naming convention implies they perform some sort of OLE object conversion.\nwConvertOLESTREAMToIStorage OLESTREAMToGenericObject OleConvertOLESTREAMToIStorage OleConvertOLESTREAMToIStorageEx New Functions The patch added these new functions:\nCheckOLELinkConversionRegistrySetting FindStringInMultiString IsAppExcludedFromOLELinkConversionRegistrySetting OleConvertOLESTREAMToIStorage2 OleConvertOLESTREAMToIStorageEx2 The IsAppExcludedFromOLELinkConversionRegistrySetting function instantly stuck out to me as an added check to determine whether some sort of OLE link should be processed.\nAdditionally, the addition of OleConvertOLESTREAMToIStorage2 and OleConvertOLESTREAMToIStorageEx2 was intriguing. Although it took a couple days after the patch, Microsoft added them to their official documentation. The function prototype looks like this:\nHRESULT OleConvertOLESTREAMToIStorage2( [in] LPOLESTREAM lpolestream, [out] LPSTORAGE pstg, [in] const DVTARGETDEVICE *ptd, [in] DWORD opt, [in] PVOID pvCallbackContext, [in] OLESTREAMQUERYCONVERTOLELINKCALLBACK pQueryConvertOLELinkCallback ); The last 3 arguments are new from the patch, and Microsoft\u0026rsquo;s description of them is shown below. An opt flag could now be provided to \u0026ldquo;disable a linked object during conversion.\u0026rdquo; Additionally, a pQueryConvertOLELinkCallback function pointer could be specified to determine whether a linked object should be converted or not. And remember, we noticed the QueryConvertOLELinkCallback function specified in the patched version of WordPad. Coincidence? I think not!\nNew arguments for the OleConvertOLESTREAMToIStorage2 function\nCreating an Exploit Things were now starting to make sense. Clearly, there was an unsafe conversion happening to an OLE LinkedObject that coerced NTLM authentication to occur. It was time to craft a payload to trigger this.\nCrafting the Payload Remember that embedded paint object we created earlier? Let\u0026rsquo;s take a look at the hex bytes within the \\objdata tag. I created an 010 template based on Microsoft\u0026rsquo;s documentation of the OLE 1 format, so we could see what\u0026rsquo;s going on.\nViewing the bytes of the embedded paintbrush object\nWe have the OLE magic followed by a FormatID field, which can have either the value 0x2 (as shown here) for an EmbeddedObject, or 0x1 for a LinkedObject. A LinkedObject! We know from our previous analysis that this is the type of object that triggers this vulnerability.\nMicrosoft documentation specifying the object header format\nLooking further at the documentation for a LinkedObject, I found that if the OLE object was of type LinkedObject, the TopicName field should point to a UNC path for the linked file:\nMicrosoft documentation detailing the TopicName field\nNow that sounded juicy. I went ahead and set the TopicName to be a file on a remote SMB share that I controlled. I also had to modify the payload a bit to remove the NativeDataSize and NativeData fields, since the LinkedObject structure did not contain them.\nCrafted file with a remote UNC path inside of a LinkedObject\nIt was almost time to reap the benefits of my work.\nThe Mark of the Web It is important to briefly discuss a concept on Windows known as the Mark of the Web (MOTW). Whenever a file is downloaded from a remote resource, Windows sets a specific flag on that file. The purpose is to indicate to applications that it should be treated with caution, since it is from an untrusted source. You can view this special flag by selecting a file\u0026rsquo;s Properties in Windows Explorer. Below shows the properties of my exploit file after I downloaded it from my remote server:\nMOTW flag set on downloaded exploit file\nApplications such as Word, Excel, and yes, WordPad, are designed to open files with the MOTW flag set in safe mode, prompting a user before loading any external resources. This is because, on Windows, fetching remote resources can lead to authentication challenges which can disclose NTLM credentials. If this bit is not set, security is much more lax.\nThe point is, a document that does not have the MOTW bit set and causes a remote resource to be fetched is likely not exploiting a vulnerability. Therefore, it was important to test the RTF file I crafted with the MOTW set.\nExploitation I downloaded my crafted RTF file from my web server and ensured the MOTW flag was set. Then, I spun up Responder on my remote server to listen for SMB resource requests. Next, I opened the crafted file in WordPad:\nOpening the crafted RTF file in WordPad, receiving a security warning\nNote that WordPad showed an alert which might lead one to believe that external resource fetches were blocked. However, this was not the case, as WordPad happily attempted to authenticate to my rogue server:\nSuccessful exploitation resulting in NTLM hashes\nAs shown in the windbg stack trace below, the file access resulted from the vulnerable OleConvertOLESTREAMToIStorage function.\nStack trace showing vulnerable function leading to file operations\nSuccess :)\nMitigation Microsoft released a support article a few days after Patch Tuesday which provided mitigations for CVE-2023-36563.\nUsers can add the registry key HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Ole\\AppCompat\\ OLELinkConversionFromOLESTREAMToIStorage and set the DWORD value Disabled to 0x00000001, according to the document. Additionally, users can add applications they wish to allowlist for OLE link conversion to the ExclusionList key value.\nAdditionally, users should be sure to apply the patch provided by Microsoft. I confirmed that my exploit did not function after patching my system.\nDetection Exploitation of this vulnerability requires opening an RTF file with a legacy OLE 1 LinkedObject structure. You probably shouldn\u0026rsquo;t receive such a file for a legitimate reason unless you are communicating with a time traveler from the 1990\u0026rsquo;s. Additionally, a malicious LinkedObject would need to contain a remote UNC path to exploit this vulnerability.\nWith this in mind, I created the following YARA rule. I am currently retro hunting with it on Virus Total as well as looking for threat actors currently using this vulnerability.\nrule RTF_LinkedObject_UNC_Path { meta: description = \u0026#34;CVE-2023-36563: Detects and RTF with a LinkedObject containing a remote UNC path in TopicName\u0026#34; author = \u0026#34;Dillon Franke\u0026#34; reference = \u0026#34;CVE-2023-36563\u0026#34; strings: // Match the \\objdata tag $rtf_objdata = \u0026#34;\\\\objdata\u0026#34; $rtf_header = { 7B 5C 72 74 } // \u0026#34;{\\rt\u0026#34; // // Match OLE version and FormatID for LinkedObject $ole_header = \u0026#34;0105000001000000\u0026#34; // // Match UNC path prefix $unc_path_upper = { 35 43 35 43 } // \u0026#34;\\\\...\u0026#34; UNC path 5C5C $unc_path_lower = { 35 63 35 63 } // \u0026#34;\\\\...\u0026#34; UNC path 5c5c condition: // File format should be RTF $rtf_header at 0 and // // Check for \\objdata tag $rtf_objdata and // // // Check for header and UNC path after the \\objdata tag $ole_header in (@rtf_objdata..@rtf_objdata+0x50) and $unc_path_lower in (@rtf_objdata..@rtf_objdata+0x400) or $unc_path_upper in (@rtf_objdata..@rtf_objdata+0x400) } Thank You Thanks for reading. I welcome any feedback and am always willing to discuss/collaborate on vulnerability research. Please reach out me @dillon_franke on Twitter, or via my contact page.\n","permalink":"https://www.dillonfrankesecurity.com/posts/cve-2023-36563-wordpad-analysis/","summary":"In this blog post, I’ll discuss my analysis of CVE-2023-36563, a Microsoft WordPad Information Disclosure Vulnerability, from initial patch diff to working exploit. Then, I’ll discuss detection and mitigation strategies for preventing exploitation of this vulnerability.\nCVE-2023-36563 Overview Summary CVE-2023-36563\u0026rsquo;s flaw lies within legacy functionality to convert an OLE 1 storage object (OLESTREAM) to the new IStorage format. By crafting a file with a malicious OLE 1 LinkedObject, an attacker could coerce authentication to an untrusted server to steal NTLM hashes.","title":"An Analysis of CVE-2023-36563, a WordPad Information Disclosure Vulnerability"},{"content":"Background Protocol Buffers (Protobufs) are a language agnostic data serialization format that allow data to be safely and efficiently trasmitted or stored. Protobuf usage has exploded within the past several years. When testing web applications, mobile applications, and embedded devices alike, it\u0026rsquo;s increasingly likely you\u0026rsquo;ll encounter Protobuf data within requests like this:\nA normal binary Protobuf request\nYou might have logically tried to fuzz these inputs as you would any other parameter, only to realize that things weren\u0026rsquo;t as simple as they appeared:\nNaively fuzzing binary protobuf data doesn\u0026rsquo;t work\nAdditionally, you might have discovered a Protobuf definition (.proto) file like the one below and wondered how you could use such a file to send valid, fuzzable requests. If so, ProtoBurp was made for you ❤️\nsyntax = \u0026#34;proto3\u0026#34;; package tutorial; message Person { string name = 1; int32 id = 2; string email = 3; enum PhoneType { PHONE_TYPE_UNSPECIFIED = 0; PHONE_TYPE_MOBILE = 1; PHONE_TYPE_HOME = 2; PHONE_TYPE_WORK = 3; } message PhoneNumber { string number = 1; PhoneType type = 2; } repeated PhoneNumber phones = 4; } message AddressBook { repeated Person people = 1; } Introducing ProtoBurp ProtoBurp is a Burp Suite extension that enables security researchers to encode and fuzz custom Protobuf messages. It allows users to automatically convert JSON data into a Protobuf message based on a provided protobuf definition file. This opens up opportunities for fuzzing inputs using Burp\u0026rsquo;s Repeater and Intruder tools, as well as proxy traffic from other tools (e.g. sqlmap).\nProtoBurp converts JSON data into a valid Protobuf\nHow do I use ProtoBurp? The magic behind ProtoBurp lies in its ability to dynamically create Protobuf messages based on provided JSON input and a Protobuf definition file.\nThe ProtoBurp extension tab in Burp Suite\nInstall ProtoBurp and its dependencies (see the GitHub repository) Create or obtain a .proto file you\u0026rsquo;d like to use to serialize Protobuf messages (examples are in the test_app folder). Use the protoc utility to compile your .proto file into Python format protoc --python_out=./ MyMessage.proto Click the \u0026lsquo;Choose File\u0026rsquo; button to select your compiled protobuf file. Check the \u0026lsquo;Enable ProtoBurp\u0026rsquo; checkbox. All requests sent with the header ProtoBurp: True will then be converted from JSON to a Protobuf! Usage with Intruder Once you have ProtoBurp set up, you can fuzz Protobuf inputs with Burp just like you would any other parameter! For example, to fuzz the number field we\u0026rsquo;ve seen in the previous examples, we can just send our JSON payload request to Intruder:\nBurp Suite Intruder usage\nFor each fuzzed request Intruder makes, ProtoBurp will handle the conversion from JSON into Protobuf format:\nIntruder requests converted into Protobuf data\nNote: The modified requests won\u0026rsquo;t show up in Burp\u0026rsquo;s proxy history. You\u0026rsquo;ll need to view the outgoing requests using Burp\u0026rsquo;s Logger or an extension like Logger++, as I did above.\nUsage with sqlmap (or any external tool) Possibly the largest motivator for creating ProtoBurp was to generate a way to seamlessly use external security tools on Protobuf inputs. For example, during one web application assessment, I identified an OR-based SQL injection in a Protobuf field, as shown below.\nSuccessful OR-based SQL injection\nNormally, my next step would be to pass this request to sqlmap and have the database fully dumped within 30 minutes. However, I couldn\u0026rsquo;t do this because of the pesky Protobufs.\nBut now enter ProtoBurp. It is now possible to give sqlmap a JSON object to insert payloads into and let ProtoBurp handle the Protobuf encoding. We can now use the following command:\nsqlmap -u http://chickenblasters.com:5000 --force-ssl --level 5 --risk 3 -H \u0026#34;ProtoBurp: true\u0026#34; --batch --proxy=http://localhost:8080 --data=\u0026#39;{\u0026#34;people\u0026#34;:[{\u0026#34;name\u0026#34;:\u0026#34;JohnDoe\u0026#34;,\u0026#34;id\u0026#34;:1,\u0026#34;email\u0026#34;:\u0026#34;john.doe@example.com\u0026#34;,\u0026#34;phones\u0026#34;:[{\u0026#34;number\u0026#34;:\u0026#34;1234567890*\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;PHONE_TYPE_MOBILE\u0026#34;},{\u0026#34;number\u0026#34;:\u0026#34;0987654321\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;PHONE_TYPE_HOME\u0026#34;}]}]}\u0026#39; Note: Make sure to set the ProtoBurp: True header!\nAll proxy traffic from sqlmap is then converted by ProtoBurp:\nSqlmap payloads converted by ProtoBurp\nGenerating a JSON payload You might be wondering: \u0026ldquo;How can I generate a JSON object from a .proto file to use with ProtoBurp?\u0026rdquo;\nEasy, I wrote a script that, given a .proto file, will fill in placeholder values to generate a JSON payload. You can then use the JSON payload with ProtoBurp. Here\u0026rsquo;s how you use the script:\n❯ python3 json-generator.py Usage: python3 json-generator.py \u0026lt;compiled_proto_definition_pb2.py\u0026gt; \u0026lt;MessageName\u0026gt; ❯ python3 json-generator.py test_app/addressbook_pb2.py AddressBook { \u0026#34;people\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;example\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;email\u0026#34;: \u0026#34;example\u0026#34;, \u0026#34;phones\u0026#34;: [ { \u0026#34;number\u0026#34;: \u0026#34;example\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;PHONE_TYPE_UNSPECIFIED\u0026#34; }, { \u0026#34;number\u0026#34;: \u0026#34;example\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;PHONE_TYPE_UNSPECIFIED\u0026#34; } ] }, { \u0026#34;name\u0026#34;: \u0026#34;example\u0026#34;, \u0026#34;id\u0026#34;: 1, \u0026#34;email\u0026#34;: \u0026#34;example\u0026#34;, \u0026#34;phones\u0026#34;: [ { \u0026#34;number\u0026#34;: \u0026#34;example\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;PHONE_TYPE_UNSPECIFIED\u0026#34; }, { \u0026#34;number\u0026#34;: \u0026#34;example\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;PHONE_TYPE_UNSPECIFIED\u0026#34; } ] } ] } What about existing tooling? I\u0026rsquo;ve used the blackboxprotobuf Burp extension for years, which aids in the decoding, editing, and re-encoding of Protobuf messages without known .proto files. For example, the figure below shows the Protobuf from above decoded by blackboxprotobuf.\nThe Blackboxprotobuf extension in action\nWhile it is an excellent tool, one of blackboxprotobuf\u0026rsquo;s notable limitations is the fact that it can only send protobuf messages it has previously seen through Burp Suite\u0026rsquo;s proxy. Sometimes, however, researchers want to send new protobuf messages, either because we want to fuzz them, or we know the format of a specific message.\nProtoBurp solves two novel problems:\nThe ability to send new protobuf messages that weren\u0026rsquo;t already seen through proxy traffic Operability with Burp Intruder and other extensions to fuzz protobuf inputs ProtoBurp GitHub Repository You can access ProtoBurp, the JSON generator script, and a test application that accepts Protobufs here. Detailed installation and usage instructions are also included.\nPlease submit any bugs or feature requests to ProtoBurp\u0026rsquo;s issue tracker.\nThanks for reading, and I wish you much success testing Protobufs!\n","permalink":"https://www.dillonfrankesecurity.com/posts/protoburp-encode-custom-protobuf-messages-in-burp/","summary":"Background Protocol Buffers (Protobufs) are a language agnostic data serialization format that allow data to be safely and efficiently trasmitted or stored. Protobuf usage has exploded within the past several years. When testing web applications, mobile applications, and embedded devices alike, it\u0026rsquo;s increasingly likely you\u0026rsquo;ll encounter Protobuf data within requests like this:\nA normal binary Protobuf request\nYou might have logically tried to fuzz these inputs as you would any other parameter, only to realize that things weren\u0026rsquo;t as simple as they appeared:","title":"ProtoBurp: Encode and Fuzz Custom Protobuf Messages in Burp Suite"},{"content":"If you want to get serious about finding impactful vulnerabilities through static analysis, it’s time to move beyond simply grep-ing through code bases. In this blog post, I’ll share my personal process for setting up a robust environment for Java static analysis of console applications, web applications, and Android applications. Once you’ve established this test environment, you’ll be able to take advantage of automatic code references, trace usages across a code base, and leverage source-to-sink analysis to find elusive vulnerabilities. 😈\n1. Choose an Integrated Development Environment (”IDE”) To make our static analysis much more effective, it’s imperative to leverage a Java IDE. An IDE is essentially a fancy text editor with the superpower of being able to resolve code references to external references such as third party libraries or the Java SDK. In this post, I’ll use the excellent IntelliJ IDEA IDE from JetBrains, although you can use any other Java IDE as well such as Eclipse.\n2. Obtain a Java Package (.jar, .war, or .apk) to Analyze When reverse-engineering a Java application, you will typically obtain a package of Java classes in the form of a .jar, .war, or .apk file. Let’s take a look at the differences between these file types with this table:\nPackage Type Description Example .jar (”Java Archive”) Packaged Java application or library https://repo1.maven.org/maven2/com/squareup/okio/okio/3.3.0/okio-3.3.0.jar .war (”Web Archive”) Packaged Java web application http://www.opencms.org/en/download/ .apk (”Android Package”) Packaged Android application https://play.google.com/store/apps/details?id=no.mobitroll.kahoot.android\u0026amp;gl=US 3. Unpack the Java Package and Obtain .jar Files The next step is to obtain .jar files from our original Java package. This process will vary slightly depending on the type of package you are analyzing.\nGetting .jar Files From a.jar File If you are analyzing a .jar file, you are ready to decompile! That was easy, move on to the next section 🙂\nGetting .jar Files From a .war File A .war file is really just a .zip archive, so we can unpack it using the unzip or jar utility:\n❯ jar xvf opencms.war created: META-INF/ inflated: META-INF/MANIFEST.MF created: WEB-INF/ inflated: WEB-INF/cmsshell.sh created: WEB-INF/setupdata/ created: WEB-INF/setupdata/database/ created: WEB-INF/setupdata/database/db2/ inflated: WEB-INF/setupdata/database/db2/create_db.sql inflated: WEB-INF/setupdata/database/db2/drop_db.sql inflated: WEB-INF/setupdata/database/db2/drop_tables.sql inflated: WEB-INF/setupdata/database/db2/create_tables.sql created: WEB-INF/setupdata/database/oracle/ inflated: WEB-INF/setupdata/database/oracle/create_db.sql inflated: WEB-INF/setupdata/database/oracle/drop_db.sql inflated: WEB-INF/setupdata/database/oracle/drop_tables.sql inflated: WEB-INF/setupdata/database/oracle/create_tables.sql # Truncated for brevity... A quick find command will show us where all the .jar files are hanging out:\n❯ find . -name \u0026#34;*.jar\u0026#34; ./WEB-INF/lib/avatica-core-1.17.0.jar ./WEB-INF/lib/jetty-util-9.4.31.v20200723.jar ./WEB-INF/lib/opencms-setup.jar ./WEB-INF/lib/xercesImpl-2.12.0.jar ./WEB-INF/lib/solr-solrj-8.11.1.jar ./WEB-INF/lib/saaj-impl-1.3.28.jar ./WEB-INF/lib/cssparser-0.9.25.jar ./WEB-INF/lib/org.opencms.locale.it.jar ./WEB-INF/lib/htmlparser-2.1.jar ./WEB-INF/lib/commons-logging-1.2.jar ./WEB-INF/lib/org.opencms.locale.de.jar ./WEB-INF/lib/openpdf-1.3.20.jar ./WEB-INF/lib/poi-ooxml-schemas-4.1.2.jar ./WEB-INF/lib/gwt-elemental-2.9.0.jar ./WEB-INF/lib/alkacon.mercury.xtensions.jar ./WEB-INF/lib/commons-pool2-2.8.1.jar ./WEB-INF/lib/hppc-0.8.2.jar ./WEB-INF/lib/gson-2.8.6.jar # Truncated for brevity... But a lot of these .jar files look like third party libraries that we might not want to spend time decompiling, at least not initially. We want to find the main logic implemented by the developers of the application we’re looking at to make the best use of our time.\nTo do this, I always check out the web.xml file, which should be in the WEB-INF/ directory. This file is used by Java application servers to determine which classes to route traffic to. For example, the figure below shows a few interesting classes implementing servlets for the OpenCMS application. From what I’m seeing here, the org.opencms package is looking like a great place to start analyzing.\n\u0026lt;!-- Truncated for brevity ---\u0026gt; \u0026lt;servlet\u0026gt; \u0026lt;description\u0026gt; The error handling servlet, also serves as trigger for static export requests. \u0026lt;/description\u0026gt; \u0026lt;servlet-name\u0026gt;OpenCmsServletErrorHandler\u0026lt;/servlet-name\u0026gt; \u0026lt;servlet-class\u0026gt;org.opencms.main.OpenCmsServletErrorHandler\u0026lt;/servlet-class\u0026gt; \u0026lt;load-on-startup\u0026gt;0\u0026lt;/load-on-startup\u0026gt; \u0026lt;/servlet\u0026gt; \u0026lt;servlet\u0026gt; \u0026lt;description\u0026gt; The main servlet that handles all requests to the OpenCms VFS. \u0026lt;/description\u0026gt; \u0026lt;servlet-name\u0026gt;OpenCmsServlet\u0026lt;/servlet-name\u0026gt; \u0026lt;servlet-class\u0026gt;org.opencms.main.OpenCmsServlet\u0026lt;/servlet-class\u0026gt; \u0026lt;load-on-startup\u0026gt;1\u0026lt;/load-on-startup\u0026gt; \u0026lt;/servlet\u0026gt; \u0026lt;!-- Truncated for brevity ---\u0026gt; Now, we can use a simple grep to identify .jar files that implement the classes we care about. These matched .jar files seem like great candidates for handling the application’s main logic\n❯ grep -ir org.opencms WEB-INF/lib Binary file WEB-INF/lib/opencms-setup.jar matches Binary file WEB-INF/lib/org.opencms.locale.it.jar matches Binary file WEB-INF/lib/org.opencms.locale.de.jar matches Binary file WEB-INF/lib/org.opencms.locale.da.jar matches Binary file WEB-INF/lib/org.opencms.locale.es.jar matches Binary file WEB-INF/lib/org.opencms.locale.cs.jar matches Binary file WEB-INF/lib/org.opencms.locale.zh.jar matches Binary file WEB-INF/lib/opencms.jar matches Binary file WEB-INF/lib/opencms-resources.jar matches Binary file WEB-INF/lib/org.opencms.locale.ru.jar matches Binary file WEB-INF/lib/org.opencms.locale.ja.jar matches Binary file WEB-INF/lib/opencms-modules.jar matches Next, let’s move those .jar files to a separate directory, since we’ll focus on decompiling them first.\n❯ mkdir jars-we-care-about \u0026amp;\u0026amp; grep -ir org.opencms WEB-INF/lib | awk \u0026#39;{print $3}\u0026#39; | xargs -I{} cp {} jars-we-care-about And we’ve extracted the .jar files from our .war file! Let’s see how to do it with an .apk file, and then we’re ready to decompile.\nGetting .jar Files From an .apk File Getting JARs from an .apk file is a bit different because Android applications utilize the Dalvik Executable (”DEX”) format to package Java classes and resources instead of JAR. However, the classes are compiled into the same (mostly, Dalvik bytecode is more optimized) bytecode. So, we can transform a .dex to a .jar file quite easily.\nWe can use unzip or jar once again to unpack the application and identify the .dex files within an .apk file. The figure below shows us identifying two .dex files for the Kahoot android application.\n❯ jar xvf no.mobitroll.kahoot.android.apk inflated: classes.dex # Dex file inflated: classes2.dex # Dex file inflated: lib/arm64-v8a/libpruneau.so inflated: lib/armeabi-v7a/libpruneau.so inflated: lib/x86/libpruneau.so inflated: lib/x86_64/libpruneau.so extracted: assets/audio/TheEnd.mp3 extracted: assets/audio/alt02-answer_010sec.mp3 extracted: assets/audio/alt02-answer_020sec.mp3 extracted: assets/audio/alt02-answer_030sec.mp3 extracted: assets/audio/alt03-answer_010sec.mp3 extracted: assets/audio/alt03-answer_020sec.mp3 extracted: assets/audio/alt03-answer_030sec.mp3 extracted: assets/audio/alt03-answer_060sec.mp3 extracted: assets/audio/alt03-answer_090sec.mp3 extracted: assets/audio/alt03-answer_120sec.mp3 extracted: assets/audio/answer_10sec.mp3 extracted: assets/audio/answer_20sec.mp3 extracted: assets/audio/answer_30sec.mp3 extracted: assets/audio/content_slide_underscore.mp3 extracted: assets/audio/correct_01.mp3 Next, we can use the dex2jar utility to convert the .dex files to .jar files:\n❯ d2j-dex2jar classes* dex2jar classes.dex -\u0026gt; ./classes-dex2jar.jar dex2jar classes2.dex -\u0026gt; ./classes2-dex2jar.jar 4. Decompile the .jar Files With our desired .jar files in hand, it’s time to decompile them! IntelliJ comes with a great decompiler that you can call from the command line. Here’s how to do it on Mac:\n❯ mkdir decompiled-jars-we-care-about # Make a new dir for decompiled jars ❯ java -Xmx7066M -cp /Applications/IntelliJ\\ IDEA\\ CE.app/Contents/plugins/java-decompiler/lib/java-decompiler.jar org.jetbrains.java.decompiler.main.decompiler.ConsoleDecompiler -mpm=3 jars-we-care-about decompiled-jars-we-care-about INFO: Decompiling class org/opencms/module/CmsModuleDependency INFO: ... done INFO: Decompiling class org/opencms/module/CmsModuleImportExportRepository INFO: ... done INFO: Decompiling class org/opencms/module/CmsModuleUpdater INFO: ... done INFO: Decompiling class org/opencms/module/CmsResourceImportData INFO: ... done INFO: Decompiling class org/opencms/module/CmsModuleVersion INFO: ... done INFO: Decompiling class org/opencms/module/CmsReplaceModuleInfo INFO: ... done INFO: Decompiling class org/opencms/module/CmsModuleXmlHandler INFO: ... done INFO: Decompiling class org/opencms/module/CmsModuleManager INFO: ... done INFO: Decompiling class org/opencms/module/CmsModule INFO: ... done INFO: Decompiling class org/opencms/module/Messages INFO: ... done INFO: Decompiling class org/opencms/module/CmsModuleImportData # Truncated for brevity... Now, we can unpack the decompiled .jar files to reveal the decompiled Java source code inside!\n❯ cd decompiled-jars-we-care-about ❯ find . -name \u0026#34;*.jar\u0026#34; | xargs -I{} jar xvf {} # Unpack all the decompiled JARs inflated: META-INF/MANIFEST.MF created: META-INF/ created: org/ created: org/opencms/ created: org/opencms/setup/ created: org/opencms/setup/ui/ created: org/opencms/setup/db/ created: org/opencms/setup/db/update6to7/ created: org/opencms/setup/db/update6to7/oracle/ created: org/opencms/setup/db/update6to7/postgresql/ created: org/opencms/setup/db/update6to7/mysql/ created: org/opencms/setup/db/update7to8/ created: org/opencms/setup/db/update7to8/oracle/ created: org/opencms/setup/db/update7to8/postgresql/ created: org/opencms/setup/db/update7to8/mysql/ created: org/opencms/setup/updater/ created: org/opencms/setup/updater/dialogs/ created: org/opencms/setup/xml/ created: org/opencms/setup/comptest/ inflated: org/opencms/setup/ui/CmsSetupStep02ComponentCheck.html inflated: org/opencms/setup/ui/CmsSetupErrorDialog.html inflated: org/opencms/setup/ui/CmsSetupStep03Database.html inflated: org/opencms/setup/ui/CmsSetupStep01License.html inflated: org/opencms/setup/ui/CmsSetupStep06ImportReport.html inflated: org/opencms/setup/ui/CmsSetupStep07ConfigNotes.html inflated: org/opencms/setup/ui/CmsSetupStep05ServerSettings.html inflated: org/opencms/setup/ui/CmsSetupStep04Modules.html inflated: org/opencms/setup/ui/CmsDbSettingsPanel.html # Truncated for brevity... We’re left with .java source files!\n❯ find . -name \u0026#34;*.java\u0026#34; ./org/opencms/cmis/CmsCmisTypeManager.java ./org/opencms/cmis/I_CmsCmisObjectHelper.java ./org/opencms/cmis/CmsCmisService.java ./org/opencms/cmis/A_CmsCmisRepository.java ./org/opencms/cmis/I_CmsCmisRenditionProvider.java ./org/opencms/cmis/CmsCmisCallContext.java ./org/opencms/cmis/I_CmsCmisRepository.java ./org/opencms/cmis/CmsCmisRelationHelper.java ./org/opencms/cmis/CmsObjectListLimiter.java ./org/opencms/cmis/CmsCmisResourceHelper.java ./org/opencms/cmis/CmsCmisServiceFactory.java ./org/opencms/cmis/CmsCmisRenditionFilter.java ./org/opencms/cmis/I_CmsPropertyProvider.java ./org/opencms/cmis/CmsCmisUtil.java ./org/opencms/cmis/CmsCmisRepository.java ./org/opencms/ui/I_CmsHasButtons.java ./org/opencms/ui/I_CmsEditPropertyContext.java ./org/opencms/ui/I_CmsUpdateListener.java ./org/opencms/ui/CmsVaadinErrorHandler.java ./org/opencms/ui/CmsUserIconHelper.java ./org/opencms/ui/util/CmsComboNullToEmptyConverter.java ./org/opencms/ui/util/CmsStyleVariable.java ./org/opencms/ui/util/CmsLogicalCheckboxGroup.java ./org/opencms/ui/util/CmsDisplayType.java ./org/opencms/ui/util/CmsNewResourceBuilder.java # Truncated for brevity... 5. Set Up Your IDE Now that we have (basically) Java source code, it’s time to load it into our IDE and start finding vulnerabilities.\nOpen Your Decompiled Java Code First, fire up IntelliJ and click Open.\nNow, select the directory of decompiled and expanded .jar files we created.\nResolve Dependencies This is where the true magic happens. We’re going to point IntelliJ to the original .jar files we extracted, (not the decompiled ones) and it is going to allow us to resolve the application’s dependencies to perform in-depth static analysis.\nGo to File → Project Structure… and, firstly, select a Java SDK that makes sense for the project you’re analyzing. Be sure to click Apply.\nNext, go the Libraries tab and click - to remove any current dependencies, as these are decompiled .jars and won’t resolve things properly.\nClick + to add a new project library and choose Java:\nSelect the folder containing the original, compiled .jar files. Include the third party dependencies, we want to be able to resolve them too!\nHit Apply and then OK.\nAdditional Unresolved Dependencies It’s possible that after adding all the original .jars as libraries, you’ll still have some unresolved dependencies within your project. These will show up red within IntelliJ.\nThis is likely because the application you are analyzing assumes that the system running it will have these dependencies on its class path already. For example, an Android APK should expect the Android SDK to be present, and a web application should expect the javax.servlet package to be present.\nSometimes, you can resolve these dependencies quickly by clicking on the red lightbulb within IntelliJ and then Find JAR on web.\nOtherwise, you can navigate back to File → Project Structure… and add a new library from Maven (the Java package manager).\nSearch for and select the dependency you need to resolve. IntelliJ will download the .jar from Maven and add it to your project.\n6. Profit! I know it took a bit to get here, but by investing time up front, you are now prepared to find vulnerabilities that simply wouldn’t be possible otherwise.\nFinding Usages One of the pain points of manual static analysis is the tedious process of tracing user-controllable input through the application. Well, with our current setup, we have made our lives much easier. We can click on any variable, method, or class and find all of its assignments and usages throughout the application. For example, we might want to understand how the class variable m_settings is being used throughout the application:\nIntelliJ\u0026rsquo;s ability to map out all read and write occurrences of a variable in question greatly speeds up manual static analysis.\nData Flow Analysis IntelliJ goes behind just finding usages, though. It can fully map out the flow of data within the application. To do this, we right click on a variable and go to Analyze → Data Flow to Here… or Data Flow from Here… Below, we are doing this to understand how the req variable of the doGet() method of an HTTP servlet is being used.\nWe can then easily view all the places the req variable is passed into other functions within the rest of the application in one single place. This is extremely useful during static analysis.\nSink-to-Source Analysis With these tools under our belt, we have to ability to find truly impactful vulnerabilities. We can leverage source-to-sink analysis, (also called taint analysis) where we trace the flow of data from dangerous functions back to parameters we control. For a more in-depth definition of source-to-sink analysis, check out one of my previous blog posts: https://www.mandiant.com/resources/blog/route-sixty-sink-launch.\nFor example, let’s say we want to look for unsafe deserialization vulnerabilities (they just so happen to be one of my favorite vulnerability classes). We know that a call to java.io.ObjectInputStream::ReadObject() on attacker-controlled data can result in SSRF, file access, or even remote code execution. Let’s see how to search for Java object deserialization within our application:\nFirst, enter ⌘ + O and search for the java.io.ObjectInputStream class:\nIdentify the readObject() method and view its data flow throughout the application:\nWe immediately have a detailed call graph leading to our sink. If we can trace it to input that we control as an attacker, (an HTTP parameter, header, etc.) we’ve found a vulnerability!\nThanks for reading! Keep an eye out for more security content coming your way soon! Stay safe out there! 🔒💻👨‍💻\n","permalink":"https://www.dillonfrankesecurity.com/posts/java-static-vulnerability-analysis-to-increase-your-bounty/","summary":"If you want to get serious about finding impactful vulnerabilities through static analysis, it’s time to move beyond simply grep-ing through code bases. In this blog post, I’ll share my personal process for setting up a robust environment for Java static analysis of console applications, web applications, and Android applications. Once you’ve established this test environment, you’ll be able to take advantage of automatic code references, trace usages across a code base, and leverage source-to-sink analysis to find elusive vulnerabilities.","title":"Java Static Vulnerability Analysis to Increase Your Bounty"},{"content":"Interested in discussing the latest trends in cybersecurity, collaborating on cutting-edge research, or in need of professional security consulting services? Please fill out the form below\u0026ndash;I look forward to our conversation.\nName: Company (Optional): Email: Message: Submit ","permalink":"https://www.dillonfrankesecurity.com/contact/","summary":"contact","title":"Contact"},{"content":" I have gained a wealth of knowledge at conferences listening to remarkable security researchers and am passionately committed to sharing my own lessons and discoveries at public forums.\n2024 ShmooCon (Washington, DC) - Fuzzing at Mach Speed: Uncovering IPC Vulnerabilities on MacOS [Abstract] [Slides] Nullcon (Berlin, Germany) - Fuzzing at Mach Speed: Uncovering IPC Vulnerabilities on MacOS [Abstract] [Slides] CanSecWest (Vancouver, Canada) - Fuzzing at Mach Speed: Uncovering IPC Vulnerabilities on MacOS/iOS [Abstract] [Slides] 2022 BlackHat USA Arsenal (Las Vegas, NV) - Route Sixty-Sink: Connecting Application Inputs to Sinks Using Static Analysis [Abstract] TROOPERS (Heidelberg, Germany) - Route Sixty-Sink: Connecting Application Inputs to Sinks Using Static Analysis [Abstract] Nullcon (Berlin, Germany) - Careful Who You Trust: Compromising P2P Cameras at Scale [Abstract] [Recording] [Slides] Qualcomm Product Security Summit (La Jolla, CA) - Careful Who You Trust: Compromising P2P Cameras at Scale 2021 Mandiant Cyber Defense Summit (Washington, DC) - Leveraging P2P Protocol Vulnerabilities to Remotely Compromise IoT Devices 2019 IEEE Symposium on Security and Privacy (San Francisco, CA) - Fidelius: Protecting User Secrets from Compromised Browsers [Abstract] [Paper] ","permalink":"https://www.dillonfrankesecurity.com/presentations/","summary":"presentations","title":"Presentations"},{"content":"Attackers are constantly innovating, seeking out novel vulnerabilities and refining their methods. To prepare for them, you need someone who can think like an attacker\u0026ndash;who is an attacker.\nApplication Security Assessment Learn from a vetted industry expert how an attacker can take advantage of your mobile or web application to cause business harm.\nExpert security source code reviews Dynamic application testing using the latest attack techniques Learn More Network Penetration Test Understand the attack vectors that could allow an attacker to breach your network and escalate privileges within it.\nUnderstand both external and internal attack vectors Identification of lateral movement and privilege escalation paths for both attackers and ransomware Learn More ","permalink":"https://www.dillonfrankesecurity.com/services/","summary":"services","title":"To Beat the Attackers, Hire One"}]